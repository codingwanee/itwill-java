package site.itwill.net;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

//채팅 클라이언트 프로그램
// => 서버에서 보내온 메세지를 얻어와 컴퍼넌트에 출력 - 반복처리
// => 컴퍼넌트로 메세지를 입력하여 서버에 전달 - 이벤트 핸들러
public class ChatClientApp extends JFrame implements ActionListener {
	private static final long serialVersionUID = 1L;
	
	private JTextField field;//입력 컴퍼넌트
	private JTextArea area;//출력 컴퍼넌트
	
	private Socket socket;//서버 접속 소켓정보를 저장하기 위한 필드
	private BufferedReader in;//메세지 입력스트림
	private PrintWriter out;//메세지 출력스트림
	
	private String aliasName;//대화명을 저장하기 위한 필드
	
	public ChatClientApp(String title) {
		super(title);
		
		field=new JTextField();
		area=new JTextArea();
		
		JScrollPane pane=new JScrollPane(area);
		
		getContentPane().add(pane, BorderLayout.CENTER);
		getContentPane().add(field, BorderLayout.SOUTH);
		
		area.setFocusable(false);
		area.setFont(new Font("굴림", Font.BOLD, 20));
		field.setFont(new Font("굴림", Font.BOLD, 20));
		
		//입력 컴퍼넌트에서 이벤트가 발생될 경우 처리할 이벤트 핸들러 등록
		field.addActionListener(this);
		
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setBounds(400, 50, 400, 500);
		setVisible(true);
		
		try {
			socket=new Socket("192.168.14.31", 5000);//서버 접속
			
			//소켓의 입력스트림을 제공받아 확장하여 필드에 저장
			in=new BufferedReader(new InputStreamReader(socket.getInputStream()));
			
			//소켓의 출력스트림을 제공받아 확장하여 필드에 저장
			out=new PrintWriter(socket.getOutputStream(),true);
		} catch (IOException e) {
			JOptionPane.showMessageDialog(this, "서버에 접속할 수 없습니다."
					, "접속오류", JOptionPane.ERROR_MESSAGE);
			System.exit(0);
		}
		
		//대화명을 입력받아 서버 전달
		while(true) {
			//입력 다이얼로그를 이용하여 대화명을 입력받아 저장 
			aliasName=JOptionPane.showInputDialog(this, "대화명을 입력해 주세요."
					, "대화명 입력", JOptionPane.QUESTION_MESSAGE);
			if(aliasName!=null && !aliasName.equals("")) break;
			JOptionPane.showMessageDialog(this, "대화명을 반드시 입력해 주세요."
					, "입력오류", JOptionPane.ERROR_MESSAGE);
		}	
		
		out.println(aliasName);
		
		//서버에서 보내온 메세지를 얻어와 컴퍼넌트에 출력 - 무한루프
		while(true) {
			try {
				area.append(in.readLine()+"\n");
				//JTextArea.setCaretPosition(int position)
				// => JTextArea 컴퍼넌트의 출력 위치를 변경하는 메소드
				area.setCaretPosition(area.getText().length());
			} catch (IOException e) {
				JOptionPane.showMessageDialog(this, "서버와 연결이 끊어졌습니다."
					, "접속오류", JOptionPane.ERROR_MESSAGE);
				System.exit(0);
			}
		}
	}
	
	public static void main(String[] args) {
		new ChatClientApp("채팅 프로그램");
	}

	//이벤트 처리 >> 컴퍼넌트에서 입력된 메세지를 얻어와 서버에 전달
	@Override
	public void actionPerformed(ActionEvent e) {
		//입력 컴퍼넌트의 메세지를 반환받아 저장
		String message=field.getText();
		
		if(!message.equals("")) {//입력 메세지가 존재할 경우
			//입력 메세지를 서버에 전달
			out.println(message);
			//입력 컴퍼넌트 초기화
			field.setText("");
		}
	}
}






